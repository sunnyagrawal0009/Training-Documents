**********************
Day 2 - 21st May 2024 
**********************		

	Version Control System Using GIT :: 
	Source Code Repository(github)
	
	Github -- Open-Source Remote Source_Code Management Tool.
	
	Repository : 
		- Collection of Folders & Files
		
		www.github.com
		
	github 
	az Repo
	bitbucket 
	aws code commit
	gitlab 
	
	
	Repository 
	
	Version Control System using GIT ::::
		
		
	Version Control System ::
	
		- It is used to version control the source code.
		- It is used to track the source code changes.
		
	Developer :
		- mywebapp.html 
		
			<html>
			func1
			---
			---
			--
			-
			-
			--
			--
			</html>
			
			save as mywebapp.html
			
			unit testing 
			
			
			<html>
			func1
			---
			---
			--
			asdfasdfasdf
			-
			--
			--
			dsfgsdfg
			sdf
			gwfsdfdf
			func2
			adfasdfasdfasdf
			achievesdfasdf
			</html>
			
			save as mywebapp.html
			
			unit testing 
			
			
			Version Control System 
			
				save as mywebapp.html_v1.0
				
				save as mywebapp.html_v1.1
				
				save as mywebapp.html_v1.2
				
				save as mywebapp.html_v1.3
				
	
	Type of Version Control System :
	
		- Local Version Control System 
		
		- Centralized Version Control System
		
		- Distributed Version Control System
		
		
		
	
	GIT --
	
		- Is a Open-Source Distrubuted Version Control System 
		
		- Used to Version control the Changes 
		
		- Used to Track the Changes 
		
		- Used to perform Parallel Development using Branching Techniques
		
		
	git :
	
		GIT is CLI - Command Line Utility/Interface installed in Local Machine used to maintain Local git repositories.
	
	github - Remote Server used to maintain the remote git repositories
	
	
Next: 
		Work with GIT 

	- Install GIT CLI 



				
**********************
Day 3 - 22nd May 2024 
**********************	

	Working with GIT!

	GIT --	
		- Is a Open-Source Distrubuted Version Control System 	
	
	GIT File Workflow ::: 60% 
	
	Local Machine 																				Remote Server
	
	Install git cli
	
	Create git Repositories and Manage the Source Code Versions
	
	Local Machine 																				 			Remote Server
	
	Working Directory 				Staging Area					 GIT Local Repository					Remote Repository
	
	mywebapp.html    ----------->	mywebapp.html	-------------->	 mywebapp.html_v1.0		----------->	mywebapp.html_v1.0
					  git add                        git commit                              git push 
	
	mywebapp.html    ----------->	mywebapp.html	-------------->	 mywebapp.html_v2.0		----------->	mywebapp.html_v2.0
					  git add                        git commit                              git push 
	
	mywebapp.html    ----------->	mywebapp.html	-------------->	 mywebapp.html_v3.0		----------->	mywebapp.html_v3.0
					  git add                        git commit                              git push 
	
			Version Control System 
			
				save as mywebapp.html_v1.0		===> Version Number / Tag / Commit ID	==> jdk 1.8 - jdk 11 - jdk 17
				
				save as mywebapp.html_v1.1
				
				save as mywebapp.html_v1.2
				
				save as mywebapp.html_v1.3	


		- mywebapp.html 
		
			<html>
			func1
			---
			---
			--
			-
			-
			--
			--
			</html>


	Developer Workload :::
	
		Enhancement / Bugfix Project 
		
		New Project 

	GIT Command :::
	
	Local Machine 																				 			Remote Server
	
	Working Directory 				Staging Area					 GIT Local Repository					Remote Repository

		git clone 		===> 	Used to copy/clone the entire remote repository to Local Machine 
		
		git add 		===> 	Used to add the changes from working directory to staging area
		
		git commit 		===> 	Used to commit the changes from staging area to local repository
		
		git push		===> 	Used to Push the changes from local repository to remote repository
		
		git fetch/pull :
				
				Both git fetch and git pull commands are used to handle the incremental changes from remote repository
				
				git fetch 
					- It is just used to check for any incremental changes in the remote repository. If any incremental changes exist, that will be updated only in the local repository and NOT in the working directory.
					- If you want to bring those changes to working directory, either we can use merge/checkout/pull commands.
				
				git pull 
					- It is used to check for any incremental changes in the remote repository. If any incremental changes exist, that will be updated in the working directory as well as in the local repository.
					
					git pull = git fetch + git merge 	

					git pull will keep your local repository in-sync with remote repository
					
		
		fork 			===>	Used to copy a remote repository to another remote repository		
		
		git init 		===> 	Used to initialize a local repository
		
		
	Working with Local GIT Repositories :::
	
	Install git client :			https://git-scm.com/downloads
	
		On Windows OS :
					- GIT BASH 
					- GIT CMD 
					- GIT GUI
		
		
	Maintain Project Folder Structure:
	
		cd d:
		mkdir DCP-May20-Projects
		cd DCP-May20-Projects
		mkdir repo1
		mkdir repo2
		mkdir repo3
		cd repo1

	
		git init 		===> 	Used to initialize a local repository
								It will create a GIT DIR! 	# Used by git to maintain the repo details
								It will create a default branch called 'master'
		
		Local Machine 																				
		
		Working Directory 				Staging Area					 GIT Local Repository		
		
		file1.txt			----->		file1.txt 		----->				
		
		
		git status 		===> Used to get the current status of the repository
		
		git log 		===> Used to get the list commits
		
		git init 
		
		create some files 
		
		git add <files>
		
		git config :::
		
			Global Configuration 		# It is applicable for all the repositories in local machine
			
				git config --global user.name "Loksai"
				git config --global user.email "Loksai@asdf.com"
				
				git config --list
				
			
			Local Configuration			# It is applicable for a specific the repository in local machine
			
				git config user.name "Loksai"
				git config user.email "Loksai@asdf.com"				
			
		
		git commit -m "<Commit_Message>"
		
		GIT ADD Command:
		
			git add <file_name>
			
			git add <file1_name> <file2_name>
			
			git add *.txt *.java
			
			git add .
		

		GIT LOG :
		
		git log
		git log --oneline
		git log -2
		git log --oneline -2
		git log --stat -2	
		
		git show  <commit_id>

  501  cd d:
  502  mkdir DCP-May20-Projects
  503  cd DCP-May20-Projects/
  504  ls
  505  mdkir repo1
  506  cd repo1
  507  mkdir repo1
  508  cd repo1
  509  cd ..
  510  mkdir repo2
  511  cd repo2
  512  cd ..
  513  ls
  514  clear
  515  cd repo1
  516  ls
  517  ls -a
  518  git init
  519  ls
  520  ls -a
  521  cd .git/
  522  ls
  523  cd ..
  524  clear
  525  ls
  526  echo "Hello"
  527  echo "record1" >> file1.txt
  528  ls
  529  cat file1.txt
  530  git status
  531  git add file1.txt
  532  git status
  533  git commit -m "Created file1.txt"
  534  git log
  535  cd ..
  536  ls
  537  cd repo2
  538  ls
  539  ls -a
  540  git init
  541  ls -a
  542  echo "record1" >> file1.txt
  543  git status
  544  git add file1.txt
  545  git status
  546  git commit -m "Created File1.txt"
  547  git status
  548  git log
  549  echo "record1" >> file2.txt
  550  git add file2.txt
  551  git commit -m "Created file2.txt"
  552  git log
  553  ls
  554  cd ..
  555  cd repo1
  556  git log
  557  git config --global user.name "Loksai"
  558  git config --global user.email "Loksai@asdfasdf.com"
  559  echo "rec1" >> f2.txt
  560  git add f2.txt
  561  git commit -m "created f2.txt"
  562  git log
  563  git config list
  564  git config --list
  565  clear
  566  git status
  567  ls
  568  git log
  569  clear
  570  echo "rec1" >> s1.txt
  571  git status
  572  echo "rec1" >> s2.txt
  573  echo "rec1" >> s3.txt
  574  echo "rec1" >> a1.java
  575  echo "rec1" >> a2.java
  576  echo "rec1" >> a3.java
  577  echo "rec1" >> q1.doc
  578  echo "rec1" >> q1.md
  579  echo "rec1" >> q2.md
  580  git status
  581  git add a1.java a2.java
  582  git status
  583  git add *.md
  584  git status
  585  git add .
  586  git status
  587  git commit -m "Created few files"
  588  git log
  589  git log --oneline
  590  git log -2
  591  git log --oneline
  592  git log --oneline -2
  593  git log --oneline -1
  594  git log -1
  595  git log --stat -1
  596  git log -1
  597  git log --stat -2
  598  git log --oneline
  599  git show 905d023
  600  history
		
Next : 
	 GIT Misc Command 
	 
	 GIT branches 
					
					
	GIT Misc. Commands 
	
	GIT Branching Techniques



	
**********************
Day 4 - 23rd May 2024 
**********************	

		
	git reset 
	
	git revert 
	
	git ignore 
	
	git branches 
	
	Unstaging the changes :
	
		git rm --cached <file_name> 
		
		git rm --cached *.txt
		
		git rm -f <file_name>
		
		git diff 		# used to find the diff before adding to staging area
		
		
		
	git reset :::
	
			- Used to Undo the Commits 
			- It will reset the HEAD Pointer back to the previous commit point 
			- The Changes will be moved back to staging area / working directory based on the reset options
			- GIT RESET will not create any new commit point for tracking
			- So, git reset is not recommended in Shared Repository
			
		git reset --soft ::
		
			- It will move the HEAD Pointer back to previous commit.			
			- It will take the changes back to staging area from the local repository.			
			- The changes will be present in staging area as well as in the working directory			
		
		git reset --mixed ::
		
			- It will move the HEAD Pointer back to previous commit.			
			- It will take the changes back to working directory from the local repository.			
			- The changes will be present only in the working directory			
		
		git reset --hard :
		
			- It will move the HEAD Pointer back to previous commit.			
			- It will permanently remove the changes from the local repository, staging area and working directory.		
			- It is permanent removal of changes from the file system.
			
		syntax :
		
			git reset --soft <previous_commit_id>
			
			5,4,3,2,1
	
	git revert :::
	
		git revert <specific_commit_id>
		
			- Used to Undo the specific Commits 
			- git revert is same as git reset --hard
			- It will create a new commit point for tracking the changes.
			- The Commit messages has be specified during git revert 
			- This is recommended in shared repositories as well.
			
	
	Git Commit :::
	
		git commit -m "<Commit_Message>"
		
		git commit -m "CR1001 - Updated payment function"

		git commit -m "REL0824 - Updated payment function"
		
		git commit --amend -m "Valid Commit Message"
	
	GIT IGNORE :::
	
		- It is used to ignore the files from tracking!
		
	Java_Web_App_Project_Folder : 					 ===>					Remote Repository 
													 Push
		src 																		src 
			main                                                            			main 
				*.java                                                      				*.java
			test                                                            			test 
				*.java                                                      				*.java 
		resources                                                           		resources 
			*.html                                                          			*.html 
			*.css                                                           			*.css 
			*.js                                                            			*.js
		DB_Crentials                                                        		DB_Crentials 
			db_user-name                                                    			db_user-name 
			db_token                                                        			db_token
		app_properties                                                     		app_properties
		target/
			*.war
		
		
		.gitignore 		# Is a file in the git repository
						# Here we maintain all file names to be ignore by git from tracking.
	
	GIT Branching Techniques :::
	
		- Branches are the logical copy of another branch in a repository.
		- Used to perform parallel development without impacting the integrity for master/default branch
		
		repo1 :
			
			master 	--> cm1,cm2,cm3		==> payment.java 			# Is considered a Production version of source code.
			
			feature1 --> cm1,cm2,cm3	==> payment.java 
			
						 cm1,cm2,cm3,f1cm1,f1cm2,f1cm3
						 
		
		Branching Strategies :::	
		
			- Branching Strategies are used to maintain the integrity of Master Branch
			
	
		Scenario 1 ::
		
			Repo1 :
			
				master : cm1,cm2,cm3
				
							cm1,cm2,cm3,f1cm1,f1cm2		# Upon merging from feature1
				
				feature1 : 	cm1,cm2,cm3
							cm1,cm2,cm3,f1cm1,f1cm2
							
							git merge feature1 		# Used to merge the changes to target branch 
							

		Scenario 2 ::
		
			Repo1 :
			
				master : cm1,cm2,cm3			payment.java
						
								cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							
				Developer_Branch1 : cm1,cm2,cm3
				
								cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
				
					feature1 : cm1,cm2,cm3	

								cm1,cm2,cm3,f1cm1,f1cm2
						
								git merge feature1 			# Used to merge the changes to developer branch 
								
					feature2 : cm1,cm2,cm3
					
								cm1,cm2,cm3,f2cm1,f2cm2
								
								git merge feature2 			# Used to merge the changes to developer branch 
								
								
		Scenario 3 ::
		
			Repo1 :
			
				master : cm1,cm2,cm3			payment.java				
				
				Integration_Branch : cm1,cm2,cm3,developer1_Changes,developer2_Changes
							
					Developer_Branch1 : cm1,cm2,cm3				
									cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
					
						feature1 : cm1,cm2,cm3	
									cm1,cm2,cm3,f1cm1,f1cm2
									git merge feature1 			# Used to merge the changes to developer branch 
									
						feature2 : cm1,cm2,cm3					
									cm1,cm2,cm3,f2cm1,f2cm2								
									git merge feature2 			# Used to merge the changes to developer branch 
									

					Developer_Branch2 : cm1,cm2,cm3				
									cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
					
						feature1 : cm1,cm2,cm3	
									cm1,cm2,cm3,f1cm1,f1cm2						
									git merge feature1 			# Used to merge the changes to developer branch 
									
						feature2 : cm1,cm2,cm3					
									cm1,cm2,cm3,f2cm1,f2cm2								
									git merge feature2 			# Used to merge the changes to developer branch 
									
									
		Scenario 4 ::
		
			Repo1 :
			
				master : cm1,cm2,cm3			payment.java	

							cm1,cm2,cm3,cm4										# cm4 is from Release_Branch i.e., integration of Team1 & Team2

					Release_Branch : cm1,cm2,cm3,Team1_Changes,Team2_Changes
				
						Integration_Branch1 : cm1,cm2,cm3,developer1_Changes,developer2_Changes										# Team1
									
							Developer_Branch1 : cm1,cm2,cm3				
											cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							
								feature1 : cm1,cm2,cm3	
											cm1,cm2,cm3,f1cm1,f1cm2
											git merge feature1 			# Used to merge the changes to developer branch 
											
								feature2 : cm1,cm2,cm3					
											cm1,cm2,cm3,f2cm1,f2cm2								
											git merge feature2 			# Used to merge the changes to developer branch 
											

							Developer_Branch2 : cm1,cm2,cm3				
											cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							
								feature1 : cm1,cm2,cm3	
											cm1,cm2,cm3,f1cm1,f1cm2						
											git merge feature1 			# Used to merge the changes to developer branch 
											
								feature2 : cm1,cm2,cm3					
											cm1,cm2,cm3,f2cm1,f2cm2								
											git merge feature2 			# Used to merge the changes to developer branch   
											
						Integration_Branch2 : cm1,cm2,cm3,developer1_Changes,developer2_Changes										# Team2
									
							Developer_Branch1 : cm1,cm2,cm3				
											cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							
								feature1 : cm1,cm2,cm3	
											cm1,cm2,cm3,f1cm1,f1cm2
											git merge feature1 			# Used to merge the changes to developer branch 
											
								feature2 : cm1,cm2,cm3					
											cm1,cm2,cm3,f2cm1,f2cm2								
											git merge feature2 			# Used to merge the changes to developer branch 
											

							Developer_Branch2 : cm1,cm2,cm3				
											cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							
								feature1 : cm1,cm2,cm3	
											cm1,cm2,cm3,f1cm1,f1cm2						
											git merge feature1 			# Used to merge the changes to developer branch 
											
								feature2 : cm1,cm2,cm3					
											cm1,cm2,cm3,f2cm1,f2cm2								
											git merge feature2 			# Used to merge the changes to developer branch 
											
		
		
		Working with Branches ::
		
			create branch
			
				git branch 			# list the branches				
				
				git branch <branch name> 	# Just Create New Branch				
				
				git switch <branch_name>	# to switch to another branch
				
				git switch -c <new branch_name> # to create and switch to new branch
				
				git checkout -b <new branch_name> # to create and switch to new branch			
			
			
			merge the changes

  501  cd d:
  502  cd DCP-May20-Projects/
  503  ls
  504  clear
  505  ls
  506  mkdir testrepo1
  507  cd testrepo1/
  508  git init
  509  git status
  510  ls -s
  511  echo "rec1" >> a1.txt
  512  git add .
  513  echo "rec1" >> a2.txt
  514  git add .
  515  echo "rec1" >> a3.txt
  516  git add .
  517  echo "rec1" >> a4.txt
  518  echo "rec1" >> s1.java
  519  clear
  520  git status
  521  git add .
  522  git status
  523  clear
  524  git status
  525  git rm --cached a1.txt
  526  git status
  527  git add .
  528  git status
  529  git rm -f s1.java
  530  git status
  531  ls
  532  git commit -m "create txtfiles"
  533  git status
  534  git log --oneline
  535  ls
  536  cat a1.txt
  537  echo "rec2" >> a1.txt
  538  cat a1.txt
  539  git status
  540  git diff
  541  git add .
  542  git commit -m "Updated a1.txt"
  543  git log --oneline
  544  clear
  545  git log
  546  cd ..
  547  clear
  548  mkdir testrepo2
  549  cd testrepo2
  550  git init
  551  clear
  552  ls -a
  553  git status
  554  echo "rec1" >> s1.txt
  555  git add .
  556  git commit -m "CM1"
  557  echo "rec1" >> s2.txt
  558  git add .
  559  git commit -m "CM2"
  560  echo "rec1" >> s3.txt
  561  git add .
  562  git commit -m "CM3"
  563  echo "rec1" >> s4.txt
  564  git add .
  565  git commit -m "CM4"
  566  echo "rec1" >> s5.txt
  567  git add .
  568  git commit -m "CM5"
  569  clear
  570  git log --oneline
  571  ls
  572  git ls-files
  573  git status
  574  git reset --soft 9a49c3c
  575  git status
  576  git ls-files
  577  ls
  578  git log --oneline
  579  git status
  580  git commit -m "CM5.1"
  581  ls
  582  git ls-files
  583  git status
  584  git log --oneline
  585  git reset --mixed 9a49c3c
  586  ls
  587  git ls-files
  588  git status
  589  git log --oneline
  590  git status
  591  git add .
  592  git commit -m "CM5.2"
  593  clear
  594  git status
  595  ls
  596  git ls-files
  597  git log --online
  598  git log --oneline
  599  git reset --hard 9a49c3c
  600  git status
  601  git ls-files
  602  ls
  603  git log --oneline
  604  git reset --hard 6b028cb
  605  ls
  606  git ls-files
  607  git log --oneline
  608  git status
  609  git reset --hard ee00a67
  610  ls
  611  git log --oneline
  612  clear
  613  git log --oneline
  614  ls
  615  echo "rec1" >> q1.txt
  616  git add .
  617  git commit -m "CM2"
  618  echo "rec1" >> q2.txt
  619  git add .
  620  git commit -m "CM3"
  621  echo "rec1" >> q3.txt
  622  git add .
  623  git commit -m "CM4"
  624  echo "rec1" >> q4.txt
  625  git add .
  626  git commit -m "CM5"
  627  clear
  628  git log --oneline
  629  git status
  630  git ls-files
  631  ls
  632  git revert fa55cc4
  633  ls
  634  git ls-files
  635  git status
  636  git log --oneline
  637  git revert c72a301
  638  ls
  639  git ls-files
  640  git status
  641  git log --oneline
  642  echo "rec1" >> l1.txt
  643  git add .
  644  git commit -m "asdfasdfasd"
  645  git log --oneline
  646  git commit -m "Valid Commit Msg"
  647  git log --oneline
  648  git commit --amend -m "Valid Msg"
  649  git log --oneline
  650  cd ..
  651  mkdir testrepo3
  652  clear
  653  cd testrepo3/
  654  ls
  655  git init
  656  ls -a
  657  git log --oneline
  658  vi .gitignore
  659  git status
  660  git add .
  661  git commit -m "Initial Commit for .gitignore file"
  662  ls
  663  ls -a
  664  cat .gitignore
  665  ls
  666  echo "rec1" >> file1.java
  667  git status
  668  echo "rec1" >> sample.txt
  669  git status
  670  ls
  671  git add .
  672  git status
  673  git commit -m "cm1"
  674  git status
  675  ls
  676  git ls-files
  677  git branch
  678  git log --oneline
  679  ls
  680  git branch feature1
  681  git branch
  682  git switch feature1
  683  git log --oneline
  684  ls
  685  git switch master
  686  git branch
  687  git switch -c feature2
  688  git branch
  689  ls
  690  git log --oneline
  691  git switch master
  692  git checkout -b feature3
  693  cd ..
  694  mkdir testrepo4
  695  cd testrepo4/
  696  git status
  697  git init
  698  ls
  699  git switch -c feature1
  700  git branch
  701  cd ..
  702  cd testrepo3/
  703  git branch
  704  ls -a
  705  cd .git
  706  ls
  707  cd objects/
  708  ls
  709  cd ..
  710  cd ..
  711  cd ..
  712  history


Next :

		merge 
		conflicts 
		
		rebase
		squash
		stash
		
		remote repos - github

		
**********************
Day 5 - 24th May 2024 
**********************	


	GIT Branching Features!
	
	
		merge 
		conflicts 
		
		rebase
		squash
		stash
		
		remote repos - github
		
		GIT MERGE ::::
		
			repo1: 
			
				master : cm1,2,3,4
				
				feature1 : cm1,2,3,4,f1cm1,2,3,4,5.......
				
					git switch master 						# First switch to target branch
					
					git merge feature1 						# Should be executed from the target branch

					merge 
					
					conflicts 	


				master 
				
					feature1		s2.txt 	--> 
					
					feature2 		s2.txt 
			
			Why Merge Conflict Occurs :::
			
				- When a file at a record level gets updated by more than one user/feature it will create merge conflicts in the target branch 
				
			How to fix the Merge Conflict :::
			
				- Identify the file(s) causing the Merge Conflict in Target Branch
				- Open and review the file content in the target branch
				- Decide which user's/feature's to be retained/removed from that target branch
				- Update the file in target branch by removing the header and footer tag lines
				- Add and Commit the Changes in Target Branch
			
			
			Prevent Merge Conflicts :::
				- With proper collaboration and review.
				
			
		GIT REBASE :::
		
			- It is used to keep the current branch in-sync with the target branch.
			- It maintains the linear commit history in the target branch
			- It is always recommended to perform git rebase before merge to target branch
			- If there is any merge conflict occurs, it will not impact the target branch.
			
			
			Eg.: 
			
			
				Repo1:
				
					master : cm1,cm2,cm3	
								cm1,cm2,cm3,f1cm1,f1cm2,f1cm3			# Upon merging feature1 
								
								cm1,cm2,cm3,f2cm1,f2cm2,f2cm3,f1cm1,f1cm2,f1cm3  # Upon merging feature2 without rebase 
								
								cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3  # Upon merging feature2 with proper rebase
					
			
					feature1 : cm1,cm2,cm3
								cm1,cm2,cm3,f1cm1,f1cm2,f1cm3			# Incremental Changes in feature1
								
								git switch master 
								
								git merge feature1					
					
					
					feature2 : cm1,cm2,cm3	
								cm1,cm2,cm3,f2cm1,f2cm2,f2cm3			# Incremental Changes in feature2
								
								git switch master 
								
								git merge feature2
								
					fixing the issue using rebase :
					
					feature2 : cm1,cm2,cm3	
								cm1,cm2,cm3,f2cm1,f2cm2,f2cm3			# Incremental Changes in feature2	

								git rebase master 						# Should be excuted in the current branch
					
					feature2 :					
								cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3

								git switch master 
								
								git merge feature2
								
		
		GIT SQUASH :::
		
			- Is a option used during the merge.
			- It is used to combine more than one commit into a single commit point.
			
			
			Eg.: 
			
				Repo1 :
				
					master : cm1,cm2,cm3 
				
							 cm1,cm2,cm3,f1cm1,2,3,4,5,6,7,8,9,.............,200 
				
					feature1 : cm1,cm2,cm3 
								cm1,cm2,cm3,f1cm1,2,3,4,5,6,7,8,9,.............,200 
								
								
								git switch master 
								
								git merge feature1
								
			Repo1 :
			
				master : cm1,cm2,cm3			payment.java
						
							cm1,cm2,cm3,f1cm1,f1cm2,3,4,5,6,7,..........,100			# Without Squash

							cm1,cm2,cm3,DEV1_Chages 									# With Squash
							
				Developer_Branch1 : cm1,cm2,cm3
				
								cm1,cm2,cm3,f1cm1,f1cm2,3,4,5,6,7,..........,100
								
								git merge --squash Developer_Branch1
								
								Enter Commit Message : ""
				
					feature1 : cm1,cm2,cm3	

								cm1,cm2,cm3,f1cm1,f1cm2,3,4,5,6,7,..........,100
								
								git switch Developer_Branch1 
						
								git merge feature1 			# Used to merge the changes to developer branch 
								
								
		Scenario 4 ::
		
			Repo1 :
			
				master : cm1,cm2,cm3			payment.java	

							cm1,cm2,cm3,cm4										# cm4 is from Release_Branch i.e., integration of Team1 & Team2

					Release_Branch : cm1,cm2,cm3,Team1_Changes,Team2_Changes
										
				
						Integration_Branch1 : cm1,cm2,cm3,developer1_Changes,developer2_Changes										# Team1
									
							Developer_Branch1 : cm1,cm2,cm3				
											cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							
								feature1 : cm1,cm2,cm3	
											cm1,cm2,cm3,f1cm1,f1cm2
											git merge feature1 			# Used to merge the changes to developer branch 
											
								feature2 : cm1,cm2,cm3					
											cm1,cm2,cm3,f2cm1,f2cm2								
											git merge feature2 			# Used to merge the changes to developer branch 
											

							Developer_Branch2 : cm1,cm2,cm3				
											cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							
								feature1 : cm1,cm2,cm3	
											cm1,cm2,cm3,f1cm1,f1cm2						
											git merge feature1 			# Used to merge the changes to developer branch 
											
								feature2 : cm1,cm2,cm3					
											cm1,cm2,cm3,f2cm1,f2cm2								
											git merge feature2 			# Used to merge the changes to developer branch   
											
				
						Integration_Branch2 : cm1,cm2,cm3,developer1_Changes,developer2_Changes										# Team2
									
							Developer_Branch1 : cm1,cm2,cm3				
											cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							
								feature1 : cm1,cm2,cm3	
											cm1,cm2,cm3,f1cm1,f1cm2
											git merge feature1 			# Used to merge the changes to developer branch 
											
								feature2 : cm1,cm2,cm3					
											cm1,cm2,cm3,f2cm1,f2cm2								
											git merge feature2 			# Used to merge the changes to developer branch 
											

							Developer_Branch2 : cm1,cm2,cm3				
											cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
							
								feature1 : cm1,cm2,cm3	
											cm1,cm2,cm3,f1cm1,f1cm2						
											git merge feature1 			# Used to merge the changes to developer branch 
											
								feature2 : cm1,cm2,cm3					
											cm1,cm2,cm3,f2cm1,f2cm2								
											git merge feature2 			# Used to merge the changes to developer branch  
											
	
	- GIT Cherry-pick 			# Used to merge the specific commit to the target branch.
								# git Cherry-pick is NOT recommended.
	
			git cherry-pick <commit_id> <commit_id>
	
			git cherry-pick <Team1_Changes>
			
	
	GIT STASH ::::
	
		- Is used to save the uncommitted changes to a temporary area.
		
		git stash save "valid message"			# Create Stash entry with valid message
		
		git stash list 							# To get the list of stashed entries
		
		git stash apply 						# To bring back latest stashed entry from stash list to the staging area
		
		git stash apply stash@{2} stash@{3}		# To bring back a specific stashed entry from stash list to the staging area

		git stash pop 							# To bring back latest stashed entry from stash list to the staging area
												# As well as delete latest stashed entry from stash list
		
		git stash  pop stash@{2} stash@{3}		# To bring back a specific stashed entry from stash list to the staging area
												# As well as delete that specific entry from stash list
												
		git stash drop							# To delete/drop the latest entry from the stash list
		
		git stash drop	stash@{2} stash@{3}		# To delete/drop a specific entry from the stash list
		
		git stash clear							# To clean-up the stash list
		
		git stash branch <temp_Branch_Name>		# To create a temp branch using the stashed entry
		
	
	
	Handling Remote Repositories using GITHUB :::
	
	Developer Workload :::
	
		Enhancement / Bugfix Project 	
		
		Pull Request -->
		
		New Project 	

  714  mkdir samplerepo1
  715  cd samplerepo1/
  716  git init
  717  echo "rec1" >> s1.txt
  718  git add .
  719  git commit -m "cm1"
  720  git log --oneline
  721  git branch
  722  git switch -c feature1
  723  git log --oneline
  724  ls
  725  echo "rec1" >> a1.txt
  726  git add .
  727  git commit -m "f1cm1"
  728  git log --oneline
  729  ls
  730  git switch master
  731  ls
  732  git log --oneline
  733  git switch feature1
  734  ls
  735  echo "rec1" >> s2.txt
  736  git add .
  737  git commit -m "f1cm2"
  738  git log --oneline
  739  git switch master
  740  git merge feature1
  741  git log --oneline
  742  ls
  743  ls
  744  git branch feature2
  745  git branch
  746  git log --oneline
  747  git switch feature2
  748  ls
  749  cat s2.txt
  750  echo "record2 from feature2" >> s2.txt
  751  cat s2.txt
  752  git status
  753  git add .
  754  git commit -m "f2cm1"
  755  git log --oneline
  756  git switch master
  757  git switch feature1
  758  ls
  759  cat s2.txt
  760  echo "record2 from feature1" >> s2.txt
  761  cat s2.txt
  762  git add .
  763  git commit -m "f1cm3"
  764  git log --oneline
  765  git switch master
  766  ls
  767  cat s2.txt
  768  git merge feature1
  769  cat s2.txt
  770  git merge feature2
  771  clear
  772  git status
  773  cat s2.txt
  774  vi s2.txt
  775  cat s2.txt
  776  git add .
  777  git commit -m "fixed the merge conflict"
  778  git log --oneline
  779  clear
  780  git log --oneline
  781  git branch
  782  cd ..
  783  mkdir samplerepo2
  784  cd samplerepo2/
  785  git init
  786  clear
  787  echo "rec1" >> s1.txt
  788  git add .
  789  git commit -m "cm1"
  790  echo "rec1" >> s2.txt
  791  git add .
  792  git commit -m "cm2"
  793  clear
  794  git log --oneline
  795  git branch feature1
  796  git branch feature2
  797  git branch
  798  git log --oneline
  799  git switch feature1
  800  git log --oneline
  801  ls
  802  echo "rec1" >> f1.txt
  803  git add .
  804  git commit -m "f1cm1"
  805  echo "rec1" >> f2.txt
  806  git add .
  807  git commit -m "f1cm2"
  808  echo "rec1" >> f3.txt
  809  git add .
  810  git commit -m "f1cm3"
  811  git log --oneline
  812  git rebase master
  813  git switch master
  814  git merge feature1
  815  git log --oneline
  816  git switch feature2
  817  git log --oneline
  818  echo "rec1" >> q1.txt
  819  git add .
  820  git commit -m "f2CM1"
  821  echo "rec1" >> q2.txt
  822  git add .
  823  git commit -m "f2CM2"
  824  git log --oneline
  825  git rebase master
  826  git log --oneline
  827  git switch master
  828  git log --oneline
  829  git merge feature2
  830  git log --oneline
  831  ls
  832  git switch feature1
  833  ls
  834  git log --oneline
  835  git rebase master
  836  git log --oneline
  837  clear
  838  git log --oneline
  839  ls
  840  echo "rec1" >> k1.txt
  841  git add .
  842  git commit -m "f1cm1.1"
  843  echo "rec" >> k1.txt
  844  git add .
  845  git commit -m "f1cm1.2"
  846  echo "rec" >> k1.txt
  847  git add .
  848  git commit -m "f1cm1.3"
  849  echo "rec" >> k1.txt
  850  git add .
  851  git commit -m "f1cm1.4"
  852  echo "rec" >> k1.txt
  853  git add .
  854  git commit -m "f1cm1.5"
  855  echo "rec" >> k1.txt
  856  git add .
  857  git commit -m "f1cm1.6"
  858  clear
  859  git log --oneline
  860  git rebase master
  861  git switch master
  862  ls
  863  git merge --squash feature1
  864  git status
  865  git commit -m "Combined commits from feature1"
  866  git log --oneline
  867  ls
  868  cat k1.txt
  869  git log --oneline
  870  clear
  871  git switch -c myfeature1
  872  echo "rec1" >> g1.txt
  873  git add .
  874  echo "rec2" >> g1.txt
  875  git add .
  876  echo "rec1" >> g2.txt
  877  git add .
  878  git status
  879  git switch master
  880  git status
  881  git switch myfeature1
  882  git status
  883  git stash save "created g1 and g2 files"
  884  git status
  885  ls
  886  git ls-files
  887  git stash list
  888  git switch master
  889  git stash list
  890  git status
  891  git switch myfeature1
  892  git stash list
  893  git stash apply
  894  ls
  895  git stash list
  896  git commit -m "created g1 and g2 files"
  897  git status
  898  ls
  899  git stash drop
  900  git stash list
  901  clear
  902  echo "rec1" >> w1.txt
  903  git add .
  904  git stash save "created for w1.txt"
  905  git statsu
  906  git status
  907  git stash list
  908  echo "rec1" >> w2.txt
  909  git add .
  910  git stash save "created for w2.txt"
  911  git stash list
  912  echo "rec1" >> w3.txt
  913  git add .
  914  git stash save "created for w3.txt"
  915  git stash list
  916  echo "rec1" >> w4.txt
  917  git add .
  918  git stash save "created for w4.txt"
  919  echo "rec1" >> w5.txt
  920  git add .
  921  git stash save "created for w5.txt"
  922  git stash list
  923  git status
  924  git stash apply stash@{2}
  925  git commit -m "Created w3.txt"
  926  git status
  927  git stash list
  928  git stash drop stash@{2}
  929  git stash list
  930  git stash pop
  931  git status
  932  git stash list
  933  git stash pop stash@{2}
  934  git stash list
  935  git switch master
  936  git stash list
  937  git switch myfeature1
  938  git status
  939  git commit -m "created w1 and W2"
  940  git status
  941  git stash list
  942  git stash clear
  943  git stash list
  944  ls
  945  echo "rec1" >> t1.txt
  946  echo "rec1" >> t1.txt
  947  echo "rec1" >> t1.txt
  948  git add .
  949  git stash save "created for t1.txt"
  950  git stash list
  951  git stash branch temp-myfeature1
  952  git branch
  953  git status
  954  git stash list
  955  echo "rec" >> t1.txt
  956  echo "rec" >> t1.txt
  957  echo "rec" >> t1.txt
  958  echo "rec" >> t1.txt
  959  echo "rec" >> t1.txt
  960  echo "rec" >> t1.txt
  961  git add .
  962  git commit -m "asdfasd"
  963  echo "rec1" >> d1.txt
  964  git add .
  965  git commit -m "asdfasdfasdf"
  966  git statius
  967  git status
  968  git log --oneline
  969  cd ..
  970  history


Next :

	Clone 
	pull /fetch 
	push 	
	remote 


		
**********************
Day 6 - 27th May 2024 
**********************		

	Clone 
	pull /fetch 
	push 
	
	remote 


			
			git clone https://github.com/Edu-DCP-May20/MyTestRemoteRepo1.git
			git status
			
			create branch 
			
			add 
			
			commit 
		
			push changes back to remote repo
			
			git Authentication :::
			
				git Credentials :
				
					- github user Id 		
					
					- gihub access token		
					
				Create github access  token
				
				
			git push -u origin local-feature1
			
			
			git fetch 
			
			git pull 
		
		git fetch/pull :
				
				Both git fetch and git pull commands are used to handle the incremental changes from remote repository
				
				git fetch 
					- It is just used to check for any incremental changes in the remote repository. If any incremental changes exist, that will be updated only in the local repository and NOT in the working directory.
					- If you want to bring those changes to working directory, either we can use merge/checkout/pull commands.
				
				git pull 
					- It is used to check for any incremental changes in the remote repository. If any incremental changes exist, that will be updated in the working directory as well as in the local repository.
					
					git pull = git fetch + git merge 	

					git pull will keep your local repository in-sync with remote repository
							
		
		
			git remote -v   			# Used to list the remote repositories link to the local repository
			
			git remote remove origin 	# disconnect/remove the remote repo from local repos

			git remote add origin 		# connect the remote repo to local repos
	
		
			New Project 	:::
			
				  852  git init
				  853  echo "rec1" >> l1.txt
				  854  git add .
				  855  git commit -m "created l1.txt"
				  856  git remote -v
				  857  git branch -M main
				  858  git branch -M master
				  859  git remote add origin https://github.com/Edu-DCP-May20/mytestrepo1.git
				  860  git remote -v
				  861  git push -u origin master


  803  cd DCP-May20-Projects/
  804  ls
  805  clear
  806  ls
  807  mkdir remoterepos
  808  cd remoterepos/
  809  clear
  810  git clone https://github.com/Edu-DCP-May20/MyTestRemoteRepo1.git
  811  ls
  812  cd MyTestRemoteRepo1/
  813  ls
  814  ls -a
  815  clear
  816  git status
  817  git remote -v
  818  git branch
  819  git log --oneline
  820  git log --oneline
  821  git switch -c local-feature1
  822  git log --oneline
  823  echo "rec1" >> localfile1.txt
  824  git add .
  825  git commit -m "Created local file1.txt"
  826  git log --oneline
  827  git push -u origin local-feature1
  828  git switch main
  829  git status
  830  git log --oneline
  831  ls
  832  git fetch
  833  git status
  834  ls
  835  git pull
  836  ls
  837  git status
  838  git log --oneline
  839  git pull
  840  git remote -v
  841  git remote remove origin
  842  git remote -v
  843  git status
  844  git remote add origin https://github.com/Edu-DCP-May20/MyTestRemoteRepo1.git
  845  git remote -v
  846  git status
  847  git remote -v
  848  cd ..
  849  mkdir testremoterepo1
  850  cd testremoterepo1/
  851  clear
  852  git init
  853  echo "rec1" >> l1.txt
  854  git add .
  855  git commit -m "created l1.txt"
  856  git remote -v
  857  git branch -M main
  858  git branch -M master
  859  git remote add origin https://github.com/Edu-DCP-May20/mytestrepo1.git
  860  git remote -v
  861  git push -u origin master
  862  history



